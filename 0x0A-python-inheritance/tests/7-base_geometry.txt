Test ``7-base_geometry`` module
===============================

Using ``BaseGeometry`` class
----------------------------

	>>> BG = __import__('7-base_geometry').BaseGeometry

Tests
-----

test ``area`` method:

	1. normal use:

		>>> bg = BG()
		>>> try:
		...	print(bg.area())
		... except Exception as e:
		...	print("[{}] {}".format(e.__class__.__name__, e))
		[Exception] area() is not implemented
		>>> bg.area()
		Traceback (most recent call last):
		Exception: area() is not implemented

	2. too many arguments:

		>>> bg = BG()
		>>> bg.area(9)
		Traceback (most recent call last):
		TypeError: area() takes 1 positional argument but 2 were given


test ``integer_validator`` method:

	1. value is not integer:

		>>> bg = BG()
		>>> bg.integer_validator("name", "John")
		Traceback (most recent call last):
		TypeError: name must be an integer
		>>> bg.integer_validator("name", 1.0)
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", True)
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", [1, 2])
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", (1, 2))
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", {1, 2, 3})
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", {"name": "ahmed"})
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", 1 + 5j)
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", complex(1, 2))
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", float('inf'))
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", float('nan'))
		Traceback (most recent call last):
                TypeError: name must be an integer
		>>> bg.integer_validator("name", None)
		Traceback (most recent call last):
                TypeError: name must be an integer

	2. value is less than 0:

		>>> bg = BG()
		>>> bg.integer_validator("distance", -4)
		Traceback (most recent call last):
		ValueError: distance must be greater than 0

	3. value is equal to 0:

		>>> bg = BG()
                >>> bg.integer_validator("age", 0)
                Traceback (most recent call last):
                ValueError: age must be greater than 0

	4. value is greater than 0:

		>>> bg = BG()
		>>> bg.integer_validator("my_int", 12)
		>>> bg.integer_validator("width", 89)

	5. missing one argument:

		>>> bg = BG()
                >>> bg.integer_validator("my_int")
		Traceback (most recent call last):
		TypeError: integer_validator() missing 1 required positional argument: 'value'

	6. no given arguments:

		>>> bg = BG()
                >>> bg.integer_validator()
		Traceback (most recent call last):
		TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	7. too many arguments:

		>>> bg = BG()
		>>> bg.integer_validator("my_int", 12, 9)
		Traceback (most recent call last):
		TypeError: integer_validator() takes 3 positional arguments but 4 were given
